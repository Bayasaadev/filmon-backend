# Generated by Django 5.2 on 2025-05-06 12:40

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=64, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Streaming',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='streaming_logos/')),
            ],
        ),
        migrations.CreateModel(
            name='Studio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('country', models.CharField(blank=True, max_length=64, null=True)),
                ('founded_year', models.PositiveIntegerField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=64, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Film',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('tagline', models.CharField(blank=True, max_length=255)),
                ('description', models.TextField(blank=True)),
                ('release_date', models.DateField(blank=True, null=True)),
                ('duration', models.PositiveIntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('poster', models.ImageField(blank=True, null=True, upload_to='films/posters/')),
                ('background', models.ImageField(blank=True, null=True, upload_to='films/backgrounds/')),
                ('trailer_url', models.URLField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('genres', models.ManyToManyField(related_name='films', to='films.genre')),
            ],
        ),
        migrations.CreateModel(
            name='FilmStreaming',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField()),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='films.film')),
                ('streaming', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='films.streaming')),
            ],
            options={
                'unique_together': {('film', 'streaming')},
            },
        ),
        migrations.AddField(
            model_name='film',
            name='streamings',
            field=models.ManyToManyField(related_name='films', through='films.FilmStreaming', to='films.streaming'),
        ),
        migrations.AddField(
            model_name='film',
            name='studios',
            field=models.ManyToManyField(blank=True, related_name='films', to='films.studio'),
        ),
        migrations.AddField(
            model_name='film',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='films', to='films.tag'),
        ),
    ]
